=========================
String Subsequence Kernel
=========================

The String Subsequence Kernel (SSK) :cite:`lodhi2002ssk` is an inner product in the 
feature space generated by all sub-sequences of length :math:`n`.

The sub-sequences are weighted by the exponentially decaying factor :math:`lambda\`. 
More weight is given to those occurrences that are nearly contiguous. 

The implementation uses an efficient dynamic programming strategy.

-------
Example
-------

We start by creating StringCharFeatures (aka CStringFeatures<char>) and BinaryLabels from files with training and test data.
.. sgexample:: sub_sequence_kernel.sg:create_features

Then, we create an instance of SubsequenceStringKernel, passing it the training data, the length and the decay.
.. sgexample:: sub_sequence_kernel.sg:create_kernel

Then, we create an instance of LibLinear, passing it the kernel and the labels for the train data.
.. sgexample:: sub_sequence_kernel.sg:create_instance

Subsequently, we train and apply the test features, returing the predicted labels.
.. sgexample:: sub_sequence_kernel.sg:train_and_apply

At the end we measure the accuracy by evaluating the results of the predicted and the test labels.
.. sgexample:: sub_sequence_kernel.sg:evaluate_accuracy



----------
References
----------
:wiki:`String_kernel`

.. bibliography:: ../../references.bib
    :filter: docname in docnames
